2025-05-11 22:49:05.153897: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1747028945.175603 2097642 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1747028945.182528 2097642 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
W0000 00:00:1747028945.201090 2097642 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1747028945.201130 2097642 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1747028945.201134 2097642 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1747028945.201137 2097642 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
2025-05-11 22:49:05.206320: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
The `load_in_4bit` and `load_in_8bit` arguments are deprecated and will be removed in the future versions. Please, pass a `BitsAndBytesConfig` object in `quantization_config` argument instead.
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:02<00:02,  2.62s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:04<00:00,  1.94s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:04<00:00,  2.04s/it]
Using cache found in /local3/minhtr/.cache/torch/hub/intel-isl_MiDaS_master
Using cache found in /local3/minhtr/.cache/torch/hub/intel-isl_MiDaS_master
Warming up PyWSD (takes ~10 secs)... took 5.760361194610596 secs.
VISION BACKBONE USE GRADIENT CHECKPOINTING:  False
LANGUAGE BACKBONE USE GRADIENT CHECKPOINTING:  False
EARLY FUSION ON, USING MHA-B
EARLY FUSION ON, USING MHA-B
EARLY FUSION ON, USING MHA-B
EARLY FUSION ON, USING MHA-B
EARLY FUSION ON, USING MHA-B
EARLY FUSION ON, USING MHA-B
EARLY FUSION ON, USING MHA-B
EARLY FUSION ON, USING MHA-B
Subset requested. Only selecting from 0 to 1
         video width height   fps  ...    a0    a1    a2    a3
0  Cm73ma6Ibcs  1280    720  24.0  ...  1636  1366  1363  1633

[1 rows x 11 columns]
  0%|          | 0/1 [00:00<?, ?it/s]Tensorizing new video. let's check RAM usage -- should be appropriately used based on the number of questions per video & batch size. This operation should not happen often.
tensorizing /local3/minhtr/VIPER/datasets/LVBench/raw_videos/Cm73ma6Ibcs.mp4 
using cpu btw
preparations complete. original frames: 87972, original fps: 24.0, requested fps: 10, so final frame count is 36655 to be processed in batches of 2000

Decoding frames in batches:   0%|          | 0/19 [00:00<?, ?it/s][A
Decoding frames in batches:   5%|▌         | 1/19 [00:02<00:46,  2.57s/it][A
Decoding frames in batches:  11%|█         | 2/19 [00:05<00:45,  2.66s/it][A
Decoding frames in batches:  16%|█▌        | 3/19 [00:07<00:42,  2.63s/it][A
Decoding frames in batches:  21%|██        | 4/19 [00:10<00:41,  2.79s/it][A
Decoding frames in batches:  26%|██▋       | 5/19 [00:13<00:38,  2.74s/it][A
Decoding frames in batches:  32%|███▏      | 6/19 [00:16<00:35,  2.75s/it][A
Decoding frames in batches:  37%|███▋      | 7/19 [00:19<00:33,  2.75s/it][A
Decoding frames in batches:  42%|████▏     | 8/19 [00:21<00:29,  2.68s/it][A
Decoding frames in batches:  47%|████▋     | 9/19 [00:23<00:25,  2.57s/it][A
Decoding frames in batches:  53%|█████▎    | 10/19 [00:26<00:23,  2.62s/it][A
Decoding frames in batches:  58%|█████▊    | 11/19 [00:29<00:20,  2.54s/it][A
Decoding frames in batches:  63%|██████▎   | 12/19 [00:31<00:17,  2.53s/it][A
Decoding frames in batches:  68%|██████▊   | 13/19 [00:34<00:15,  2.56s/it][A
Decoding frames in batches:  74%|███████▎  | 14/19 [00:36<00:13,  2.63s/it][A
Decoding frames in batches:  79%|███████▉  | 15/19 [00:39<00:10,  2.72s/it][A
Decoding frames in batches:  84%|████████▍ | 16/19 [00:42<00:08,  2.68s/it][A
Decoding frames in batches:  89%|████████▉ | 17/19 [00:44<00:05,  2.61s/it][A
Decoding frames in batches:  95%|█████████▍| 18/19 [00:47<00:02,  2.64s/it][A
Decoding frames in batches: 100%|██████████| 19/19 [00:48<00:00,  2.11s/it][ADecoding frames in batches: 100%|██████████| 19/19 [00:48<00:00,  2.55s/it]
tensorization finished with torch.Size([36655, 3, 360, 640]) and torch.uint8. if caching turned on, that may take a while. 
video Cm73ma6Ibcs completely finished tensorization
raw code generation output
['```python\ndef execute_command(video, possible_answers, query) -> [str, dict]:\n    import re\n    video_segment = VideoSegment(video)\n    # Assume the opening caption is in the first few frames\n    for frame in video_segment.frame_iterator():\n        text = frame.simple_query("What text is in the frame?")\n        if text:\n            # Use regular expressions to find a four-digit year\n            match = re.search(r\'\\b(1[3-6][3-6][3-6])\\b\', text)\n            if match:\n                year_found = match.group(0)\n                break\n    else:\n        # Default to None if no match is found\n        year_found = None\n    \n    # Create the info dictionary\n    info = {\n        "Opening caption year": year_found\n    }\n    \n    # Answer the query\n    if year_found in possible_answers:\n        answer = year_found\n    else:\n        answer = "Year not found in possible answers"\n        \n    return answer, info']
> /local3/minhtr/VIPER/VdebuggerFollowup/vision_models.py(1097)forward_()
-> return resp
(Pdb) '    import re\n    video_segment = VideoSegment(video)\n    # Assume the opening caption is in the first few frames\n    for frame in video_segment.frame_iterator():\n        text = frame.simple_query("What text is in the frame?")\n        if text:\n            # Use regular expressions to find a four-digit year\n            match = re.search(r\'\\b(1[3-6][3-6][3-6])\\b\', text)\n            if match:\n                year_found = match.group(0)\n                break\n    else:\n        # Default to None if no match is found\n        year_found = None\n    \n    # Create the info dictionary\n    info = {\n        "Opening caption year": year_found\n    }\n    \n    # Answer the query\n    if year_found in possible_answers:\n        answer = year_found\n    else:\n        answer = "Year not found in possible answers"\n        \n    return answer, info'
(Pdb) '    import re\n    video_segment = VideoSegment(video)\n    # Assume the opening caption is in the first few frames\n    for frame in video_segment.frame_iterator():\n        text = frame.simple_query("What text is in the frame?")\n        if text:\n            # Use regular expressions to find a four-digit year\n            match = re.search(r\'\\b(1[3-6][3-6][3-6])\\b\', text)\n            if match:\n                year_found = match.group(0)\n                break\n    else:\n        # Default to None if no match is found\n        year_found = None\n    \n    # Create the info dictionary\n    info = {\n        "Opening caption year": year_found\n    }\n    \n    # Answer the query\n    if year_found in possible_answers:\n        answer = year_found\n    else:\n        answer = "Year not found in possible answers"\n        \n    return answer, info'
(Pdb) ABOUT TO RUN THE FOLLOWING CODE: 
def execute_command_0(video, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # Answer is
 
> /local3/minhtr/VIPER/VdebuggerFollowup/main_batch.py(61)run_program()
-> try:
(Pdb) ' '
(Pdb) [' ', 0, tensor([[[[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]],

         [[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]],

         [[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]]],


        [[[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]],

         [[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]],

         [[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]]],


        [[[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]],

         [[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]],

         [[ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          ...,
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0],
          [ 0,  0,  0,  ...,  0,  0,  0]]],


        ...,


        [[[46, 46, 46,  ..., 12, 12, 12],
          [46, 46, 46,  ..., 12, 12, 12],
          [46, 46, 46,  ..., 12, 12, 12],
          ...,
          [17, 17, 17,  ..., 14, 14, 14],
          [17, 17, 17,  ..., 14, 14, 14],
          [17, 17, 17,  ..., 14, 14, 14]],

         [[ 0,  0,  0,  ...,  7,  7,  7],
          [ 0,  0,  0,  ...,  7,  7,  7],
          [ 0,  0,  0,  ...,  7,  7,  7],
          ...,
          [ 6,  6,  6,  ...,  7,  7,  7],
          [ 6,  6,  6,  ...,  7,  7,  7],
          [ 6,  6,  6,  ...,  7,  7,  7]],

         [[ 2,  2,  2,  ...,  6,  6,  6],
          [ 2,  2,  2,  ...,  6,  6,  6],
          [ 2,  2,  2,  ...,  6,  6,  6],
          ...,
          [ 4,  4,  4,  ...,  4,  4,  4],
          [ 4,  4,  4,  ...,  4,  4,  4],
          [ 4,  4,  4,  ...,  4,  4,  4]]],


        [[[46, 46, 46,  ..., 12, 12, 12],
          [46, 46, 46,  ..., 12, 12, 12],
          [46, 46, 46,  ..., 12, 12, 12],
          ...,
          [17, 17, 17,  ..., 14, 14, 14],
          [17, 17, 17,  ..., 14, 14, 14],
          [17, 17, 17,  ..., 14, 14, 14]],

         [[ 0,  0,  0,  ...,  7,  7,  7],
          [ 0,  0,  0,  ...,  7,  7,  7],
          [ 0,  0,  0,  ...,  7,  7,  7],
          ...,
          [ 6,  6,  6,  ...,  7,  7,  7],
          [ 6,  6,  6,  ...,  7,  7,  7],
          [ 6,  6,  6,  ...,  7,  7,  7]],

         [[ 2,  2,  2,  ...,  6,  6,  6],
          [ 2,  2,  2,  ...,  6,  6,  6],
          [ 2,  2,  2,  ...,  6,  6,  6],
          ...,
          [ 4,  4,  4,  ...,  4,  4,  4],
          [ 4,  4,  4,  ...,  4,  4,  4],
          [ 4,  4,  4,  ...,  4,  4,  4]]],


        [[[46, 46, 46,  ..., 12, 12, 12],
          [46, 46, 46,  ..., 12, 12, 12],
          [46, 46, 46,  ..., 12, 12, 12],
          ...,
          [17, 17, 17,  ..., 14, 14, 14],
          [17, 17, 17,  ..., 14, 14, 14],
          [17, 17, 17,  ..., 14, 14, 14]],

         [[ 0,  0,  0,  ...,  7,  7,  7],
          [ 0,  0,  0,  ...,  7,  7,  7],
          [ 0,  0,  0,  ...,  7,  7,  7],
          ...,
          [ 6,  6,  6,  ...,  7,  7,  7],
          [ 6,  6,  6,  ...,  7,  7,  7],
          [ 6,  6,  6,  ...,  7,  7,  7]],

         [[ 2,  2,  2,  ...,  6,  6,  6],
          [ 2,  2,  2,  ...,  6,  6,  6],
          [ 2,  2,  2,  ...,  6,  6,  6],
          ...,
          [ 4,  4,  4,  ...,  4,  4,  4],
          [ 4,  4,  4,  ...,  4,  4,  4],
          [ 4,  4,  4,  ...,  4,  4,  4]]]], dtype=torch.uint8), ['1636', '1366', '1363', '1633'], 'What year appears in the opening caption of the video?']
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) --KeyboardInterrupt--
(Pdb) *** NameError: name 'qq' is not defined
(Pdb)   0%|          | 0/1 [07:28<?, ?it/s]
Traceback (most recent call last):
  File "/local3/minhtr/VIPER/VdebuggerFollowup/main_batch.py", line 204, in main
    result = run_program([c, sample_id, img, possible_answers, query], queues_in, input_type)
  File "/local3/minhtr/VIPER/VdebuggerFollowup/main_batch.py", line 61, in run_program
    try:
  File "/local3/minhtr/VIPER/VdebuggerFollowup/main_batch.py", line 61, in run_program
    try:
  File "/local/minh/miniconda3/envs/viper-main/lib/python3.10/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
  File "/local/minh/miniconda3/envs/viper-main/lib/python3.10/bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit
Exception: 
Completing logging and exiting...
Error computing accuracy: division by zero
Saving results to results_5.json

Batch 0 all_results: ['1633', 'Cloudy']
Batch 0 all_codes: ['def execute_command_0(video, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):\n    # Answer is\n    import torch\n\n    # Create a VideoSegment for the first portion of the video where the opening caption might appear.\n    video_segment = VideoSegment(video, 0, video.shape[0] // 5)\n\n    # Iterate over frames in this segment to find the year in the opening caption.\n    for frame in video_segment.frame_iterator():\n        # Using best_text_match to find the best matching year from possible answers\n        answer = frame.best_text_match(possible_answers, prefix=query)\n        if answer:\n            return answer\n    \n    # If nothing found in first segment, fallback to scanning the entire video\n    video_segment = VideoSegment(video)\n    for frame in video_segment.frame_iterator():\n        answer = frame.best_text_match(possible_answers, prefix=query)\n        if answer:\n            return answer\n\n    # Default return if no answer is found\n    return ""', 'def execute_command_1(video, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):\n    # Answer is\n    import math\n\n    # Create a VideoSegment for the opening part of the video, which is approximately the first fifth.\n    video_segment_opening = VideoSegment(video, 0, video.shape[0] // 5)\n\n    # We will check every 5 frames in the segment for efficiency.\n    for frame in video_segment_opening.frame_iterator():\n        answer = frame.simple_query(query)\n        if answer in possible_answers:\n            return answer\n\n    # Default to the first possible answer if no specific match is found\n    return possible_answers[0]']
Batch 0 all_ids: [0, 1]
Batch 0 all_answers: ['1633', 'Snowy']
Batch 0 all_possible_answers: [['1636', '1366', '1363', '1633'], ['Cloudy', 'Snowy', 'Sunny', 'Rainy']]
Batch 0 all_queries: ['What year appears in the opening caption of the video?', 'How is the weather like in the opening?']
Batch 0 all_query_types: ['key information retrieval', 'event understanding']
Batch 0 all_img_paths: ['/local3/minhtr/VIPER/datasets/LVBench/raw_videos/Cm73ma6Ibcs.mp4', '/local3/minhtr/VIPER/datasets/LVBench/raw_videos/Cm73ma6Ibcs.mp4']
all code execution finished. going to accuracy.
Batch 1 all_results: ['1633', 'Cloudy', 'The protagonist pushes the table aside and stands up, confronting the man. After a series of quarrels, she injuries  the man and leaves the restaurant. The chef follows her', 'The protagonist cuts off the hand of the man with the gun with her sword']
Batch 1 all_codes: ['def execute_command_0(video, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):\n    # Answer is\n    import torch\n\n    # Create a VideoSegment for the first portion of the video where the opening caption might appear.\n    video_segment = VideoSegment(video, 0, video.shape[0] // 5)\n\n    # Iterate over frames in this segment to find the year in the opening caption.\n    for frame in video_segment.frame_iterator():\n        # Using best_text_match to find the best matching year from possible answers\n        answer = frame.best_text_match(possible_answers, prefix=query)\n        if answer:\n            return answer\n    \n    # If nothing found in first segment, fallback to scanning the entire video\n    video_segment = VideoSegment(video)\n    for frame in video_segment.frame_iterator():\n        answer = frame.best_text_match(possible_answers, prefix=query)\n        if answer:\n            return answer\n\n    # Default return if no answer is found\n    return ""', 'def execute_command_1(video, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):\n    # Answer is\n    import math\n\n    # Create a VideoSegment for the opening part of the video, which is approximately the first fifth.\n    video_segment_opening = VideoSegment(video, 0, video.shape[0] // 5)\n\n    # We will check every 5 frames in the segment for efficiency.\n    for frame in video_segment_opening.frame_iterator():\n        answer = frame.simple_query(query)\n        if answer in possible_answers:\n            return answer\n\n    # Default to the first possible answer if no specific match is found\n    return possible_answers[0]', 'def execute_command_2(video, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):\n    # Answer is\n    from typing import List, Iterator\n    import torch\n\n    # Create a VideoSegment for the entire video\n    video_segment = VideoSegment(video)\n    \n    # Check for the event where the man with the gun threatens the cook\n    threat_event_found = False\n    post_threat_segment = None\n    \n    for i, frame in enumerate(video_segment.frame_iterator()):\n        if frame.exists("man with gun") and frame.exists("cook") and frame.simple_query("Is the man with the gun threatening the cook?") == "yes":\n            threat_event_found = True\n            # Create a VideoSegment for the frames after the threat\n            post_threat_segment = video_segment.trim(i+1, None)\n            break\n\n    # If threat_event_found is True, analyze the post-threat segment\n    if threat_event_found and post_threat_segment is not None:\n        # Iterate every 5 frames for efficiency\n        for i, frame in enumerate(post_threat_segment.frame_iterator()):\n            if i % 5 == 0:\n                if frame.exists("protagonist"):\n                    # Check for the protagonist\'s actions\n                    if frame.simple_query("Is the protagonist confronting the man?") == "yes" and frame.simple_query("Does the protagonist kill the man?") == "yes":\n                        answer = possible_answers[0]  # First answer matches\n                        return answer\n                    elif frame.simple_query("Is the protagonist confronting the man?") == "yes" and frame.simple_query("Does the protagonist injure the man?") == "yes":\n                        answer = possible_answers[1]  # Second answer matches\n                        return answer\n                    elif frame.simple_query("Is the protagonist taking out a gun?") == "yes" and frame.simple_query("Does the protagonist kill the man?") == "yes":\n                        answer = possible_answers[2]  # Third answer matches\n                        return answer\n\n    # Fallback: If no match is found, return a default or empty answer\n    answer = ""\n    return answer', 'def execute_command_3(video, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):\n    # Answer is\n    import math\n\n    # Determine the length of the video in frames\n    total_frames = video.shape[0]\n\n    # We assume the action happens towards the middle of the video as no specific start point is provided\n    # So we segment the video from the start to the end\n    video_segment = VideoSegment(video)\n\n    # Iterate over every 5th frame to speed up processing\n    for i, frame in enumerate(video_segment.frame_iterator()):\n        if i % 5 != 0:\n            continue\n\n        # Check for the presence of "protagonist" and "man with the gun" in the frame\n        if frame.exists("protagonist") and frame.exists("man with the gun"):\n            # Check for possible actions the protagonist might take\n            for answer in possible_answers:\n                if frame.simple_query(f"Is the action \'{answer}\' happening?") == "yes":\n                    return answer\n    \n    return None']
Batch 1 all_ids: [0, 1, 2, 3]
Batch 1 all_answers: ['1633', 'Snowy', 'The protagonist pushes the table aside and stands up, confronting the man. After a series of quarrels, she kills the man and leaves the restaurant. The chef follows her', 'The protagonist cuts off two fingers of the man with the gun with her sword']
Batch 1 all_possible_answers: [['1636', '1366', '1363', '1633'], ['Cloudy', 'Snowy', 'Sunny', 'Rainy'], ['The protagonist pushes the table aside and stands up, confronting the man. After a series of quarrels, she kills the man and leaves the restaurant. The chef follows her', 'The protagonist pushes the table aside and stands up, confronting the man. After a series of quarrels, she injuries  the man and leaves the restaurant. The chef follows her', 'The protagonist pushes the table aside and stands up, taking out her gun and pointing at the man. After a series of quarrels, she kills the man and leaves the restaurant. The chef follows her', 'The protagonist pushes the table aside and stands up, taking out her gun and pointing at the man. After a series of quarrels, she kills the man and leaves the restaurant'], ['The protagonist cuts off the hand of the man with the gun with her sword', 'The protagonist cuts off two fingers of the man with the gun with her sword', 'The protagonist impales the man with the gun with her word', 'The protagonist breaks the windows with her sword and flees']]
Batch 1 all_queries: ['What year appears in the opening caption of the video?', 'How is the weather like in the opening?', 'After the man with the gun threatens the cook, what does the protagonist do?', 'What does the protagonist do when the man with the gun keeps approaching her?']
Batch 1 all_query_types: ['key information retrieval', 'event understanding', 'summarization', 'event understanding']
Batch 1 all_img_paths: ['/local3/minhtr/VIPER/datasets/LVBench/raw_videos/Cm73ma6Ibcs.mp4', '/local3/minhtr/VIPER/datasets/LVBench/raw_videos/Cm73ma6Ibcs.mp4', '/local3/minhtr/VIPER/datasets/LVBench/raw_videos/Cm73ma6Ibcs.mp4', '/local3/minhtr/VIPER/datasets/LVBench/raw_videos/Cm73ma6Ibcs.mp4']
all code execution finished. going to accuracy.
